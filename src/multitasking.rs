//! 抢占式多任务:
//! 操作系统在每次硬件中断时，保存当前线程任务的上下文（寄存器值等），
//! 然后切换到另一个线程任务，恢复其上下文，继续执行。
//! 这是传统用户级程序运行的方式
//! 一个进程有自己独立的堆栈空间和堆内存空间
//! 一个进程可以有多个线程，线程共享进程的堆内存空间，但有自己独立的堆栈空间
//!
//! 协作式多任务：
//! 程序执行期间，主动让出CPU，让其他线程执行（async/await，协程等）
//! 协作多任务处理的强大性能和内存优势使其成为在程序中使用的好方法，特别是与异步操作结合使用。
//! 由于操作系统内核是与异步硬件交互的性能关键型程序，因此协作多任务处理似乎是实现并发的好方法。

pub mod co;
pub mod preempt;
